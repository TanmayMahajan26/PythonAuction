import tkinter as tk
from tkinter import messagebox
import turtle
import datetime

class Artifact:
    def __init__(self, name, description, starting_price):
        self.name = name
        self.description = description
        self.starting_price = starting_price
        self.bids = []
        self.is_active = True
        self.end_time = None

    def place_bid(self, user, amount):
        if not self.is_active:
            return False
        if amount <= self.starting_price and not self.bids:
            return False
        if self.bids and amount <= self.bids[-1]['amount']:
            return False
        self.bids.append({'user': user, 'amount': amount})
        return True

    def end_auction(self):
        self.is_active = False
        self.end_time = datetime.datetime.now()
        return self.bids[-1] if self.bids else None

class User:
    def __init__(self, username):
        self.username = username

class Auction:
    def __init__(self):
        self.artifacts = []
        self.users = []

    def add_artifact(self, artifact):
        self.artifacts.append(artifact)

    def register_user(self, user):
        self.users.append(user)

    def start_auction(self, artifact):
        artifact.is_active = True
        artifact.end_time = datetime.datetime.now() + datetime.timedelta(seconds=20)  # 20 seconds auction

class AuctionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Online Auction System for Indian Artifacts")
        
        self.auction = Auction()
        self.current_artifact = None
        self.user = None  # Initialize user to None
        self.timer_running = False

        # User Registration
        self.username_label = tk.Label(root, text="Enter your username:")
        self.username_label.pack()
        self.username_entry = tk.Entry(root)
        self.username_entry.pack()
        self.register_button = tk.Button(root, text="Register", command=self.register_user)
        self.register_button.pack()

        # Artifact Details
        self.artifact_name_label = tk.Label(root, text="Artifact Name:")
        self.artifact_name_label.pack()
        self.artifact_name_entry = tk.Entry(root)
        self.artifact_name_entry.pack()

        self.artifact_desc_label = tk.Label(root, text="Artifact Description:")
        self.artifact_desc_label.pack()
        self.artifact_desc_entry = tk.Entry(root)
        self.artifact_desc_entry.pack()

        self.starting_price_label = tk.Label(root, text="Starting Price:")
        self.starting_price_label.pack()
        self.starting_price_entry = tk.Entry(root)
        self.starting_price_entry.pack()

        self.add_artifact_button = tk.Button(root, text="Add Artifact", command=self.add_artifact)
        self.add_artifact_button.pack()

        self.start_auction_button = tk.Button(root, text="Start Auction", command=self.start_auction)
        self.start_auction_button.pack()

        self.bid_amount_label = tk.Label(root, text="Enter your bid amount:")
        self.bid_amount_label.pack()
        self.bid_amount_entry = tk.Entry(root)
        self.bid_amount_entry.pack()

        self.place_bid_button = tk.Button(root, text="Place Bid", command=self.place_bid)
        self.place_bid_button.pack()

        self.result_label = tk.Label(root, text="")
        self.result_label.pack()

        self.current_bid_label = tk.Label(root, text="Current Highest Bid: None")
        self.current_bid_label.pack()

        self.timer_label = tk.Label(root, text="Time Remaining: 20 seconds")
        self.timer_label.pack()

        # Initialize turtle graphics
        self.turtle_canvas = turtle.ScrolledCanvas(root)
        self.turtle_canvas.pack(fill=tk.BOTH, expand=tk.YES)
        self.turtle_screen = turtle.TurtleScreen(self.turtle_canvas)
        self.turtle = turtle.RawTurtle(self.turtle_screen)

    def register_user(self):
        username = self.username_entry.get()
        if username:
            self.user = User(username)
            messagebox.showinfo("Registration", f" User  '{username}' registered successfully!")
        else:
            messagebox.showwarning("Input Error", "Please enter a username.")

    def add_artifact(self):
        name = self.artifact_name_entry.get()
        description = self.artifact_desc_entry.get()
        starting_price = self.starting_price_entry.get()

        if name and description and starting_price.isdigit():
            artifact = Artifact(name, description, int(starting_price))
            self.auction.add_artifact(artifact)
            self.current_artifact = artifact
            messagebox.showinfo("Artifact Added", f"Artifact '{name}' added successfully!")
        else:
            messagebox.showwarning("Input Error", "Please fill in all fields correctly.")

    def start_auction(self):
        if self.current_artifact:
            self.auction.start_auction(self.current_artifact)
            messagebox.showinfo("Auction Started", f"Auction for '{self.current_artifact.name}' has started!")
            self.draw_artifact()
            self.start_timer()
        else:
            messagebox.showwarning("Auction Error", "No artifact to auction.")

    def place_bid(self):
        if self.current_artifact and self.current_artifact.is_active:
            amount = self.bid_amount_entry.get()
            if amount.isdigit():
                amount = int(amount)
                if self.current_artifact.place_bid(self.user, amount):
                    messagebox.showinfo("Bid Placed", f"Bid of {amount} placed by {self.user.username}.")
                    self.update_current_bid()
                    self.reset_timer()  # Reset timer on new bid
                else:
                    messagebox.showwarning("Bid Error", "Bid must be higher than the starting price or last bid.")
            else:
                messagebox.showwarning("Input Error", "Please enter a valid bid amount.")
        else:
            messagebox.showwarning("Auction Error", "Auction is not active or no artifact available.")

    def update_current_bid(self):
        if self.current_artifact.bids:
            highest_bid = self.current_artifact.bids[-1]
            self.current_bid_label.config(text=f"Current Highest Bid: {highest_bid['amount']} by {highest_bid['user'].username}")
        else:
            self.current_bid_label.config(text="Current Highest Bid: None")

    def draw_artifact(self):
        self.turtle.clear()
        self.turtle.penup()
        self.turtle.goto(0, 0)
        self.turtle.pendown()
        self.turtle.write(f"Auctioning: {self.current_artifact.name}", align="center", font=("Arial", 16, "normal"))
        self.turtle.penup()
        self.turtle.goto(0, -20)
        self.turtle.pendown()
        self.turtle.write(f"Description: {self.current_artifact.description}", align="center", font=("Arial", 12, "normal"))
        self.turtle.penup()
        self.turtle.goto(0, -40)
        self.turtle.pendown()
        self.turtle.write(f"Starting Price: {self.current_artifact.starting_price}", align="center", font=("Arial", 12, "normal"))

    def start_timer(self):
        self.timer_running = True
        self.remaining_time = 20  # Set to 20 seconds
        self.update_timer()

    def update_timer(self):
        if self.timer_running and self.remaining_time > 0:
            self.timer_label.config(text=f"Time Remaining: {self.remaining_time} seconds")
            self.remaining_time -= 1
            self.root.after(1000, self.update_timer)
        elif self.remaining_time == 0:
            self.end_auction()

    def reset_timer(self):
        self.remaining_time = 20  # Reset to 20 seconds
        self.update_timer()

    def end_auction(self):
        self.timer_running = False
        if self.current_artifact:
            winner = self.current_artifact.end_auction()
            if winner:
                messagebox.showinfo("Auction Ended", f"Auction ended! Winner: {winner['user'].username} with bid of {winner['amount']}.")
            else:
                messagebox.showinfo("Auction Ended", "Auction ended with no bids.")
            self.current_bid_label.config(text="Current Highest Bid: None")
            self.result_label.config(text="")
            self.timer_label.config(text="")

if __name__ == "__main__":
    root = tk.Tk()
    app = AuctionApp(root)
    root.mainloop()
